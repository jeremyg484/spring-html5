<html xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:tiles="http://tiles.apache.org/tags-tiles" xmlns:spring="http://www.springframework.org/tags" xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" manifest="cache.manifest">  
	
	<jsp:output doctype-root-element="HTML" doctype-system="about:legacy-compat" />
	
	<jsp:directive.page contentType="text/html;charset=UTF-8" />  
		
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=8" />
		<spring:message code="application_name" var="app_name"/>
		<title><spring:message code="welcome_h3" arguments="${app_name}" /></title>	
		<util:load-scripts />
		<style> :invalid { background-color: red; } </style>
		<script type="text/javascript" language="JavaScript" src="templates/soyutils.js"><!-- required for FF3 and Opera --></script>
		<script type="text/javascript" language="JavaScript" src="templates/template.js"><!-- required for FF3 and Opera --></script>
		
		<script type="text/javascript">
			dojo.require("dijit.form.SimpleTextarea");
			dojo.require("dijit.form.FilteringSelect");
			dojo.require("dijit.form.Form");
			dojo.addOnLoad(function(){
				
				var controller = {
					basePath : location.protocol + "//" + location.host + "/" + (location.pathname.search(/spring-html5/) > -1 ? "spring-html5/" : ""), 

					getModel : function(url) {
						return dojo.xhrGet({
							url : url.match(/.*[^\?form]/)[0],
	
							preventCache : true,
	
							handleAs : "json",
	
							headers : {
								"Content-Type": "application/json",
								"Accept": "application/json"
							}
						});
					},

					getView : function(url) {
						var view = { requiresModel : true };
						var hasIdentifier = false;
						var paths = url.match(new RegExp(this.basePath+"(.[^?]*)"))[1].split("/");
						var template = views;
						for(var x in paths) {
							if (paths[x].search(/\d/) > -1) {
								hasIdentifier = true;
								continue;
							}
							if (!template.hasOwnProperty(paths[x])) {
								return null;
							}
							template = template[paths[x]];
						}
						if (url.search(/\?form/) > -1) {
							template = template["form"];
							if(!hasIdentifier) {
								view.requiresModel = false;
							}
						} else if(hasIdentifier){
							template = template["detail"];
						} else {
							template = template["list"];
						}
						view.template = template;
						return dojo.isFunction(view.template) ? view : null;
					},
					
					renderView : function(view, url) {
						var model = view.requiresModel ? controller.getModel(url) : null;
						dojo.when(model, function(model){
							var content = view.template.apply(window, [{model : model}]);
							dojo.html.set(main, content, {parseContent:true, 
								onBegin: function(){
									var existing = dijit.byId("content");
									if (existing) {
										existing.destroyRecursive();
									}
								},
								onEnd: function(){
									this.inherited("onEnd", arguments);
									dojo.query("#content a").forEach(function(navItem) {
										dojo.connect(navItem, "onclick", function(e) {
											var main = dojo.byId("main");
											var view = controller.getView(navItem.href);
											if (view) {
												dojo.stopEvent(e);
												controller.renderView(view, navItem.href);
											}
										});
									});
									
									dijit.byId("content").toggle();
								}
							});
						});
						
						if(location.href != url) {
							history.pushState({}, "view", url);
						}
					}
				};
				
				dojo.query("a.menuItem").forEach(function(menuItem) {
					dojo.connect(menuItem, "onclick", function(e) {
						var main = dojo.byId("main");
						var view = controller.getView(menuItem.href);
						if (view) {
							dojo.stopEvent(e);
							controller.renderView(view, menuItem.href);
						}
					});
				});
				
				dojo.connect(window, "onpopstate", function(e){
					if(location.href.search(/html5-index/) > -1) {
						location.reload();
						return;
					}
					var view = controller.getView(location.href);
					if (view) {
						controller.renderView(view, location.href);  
					}
				});
			});
		</script>
	</head>
	
  	<body class="claro spring">
   		<div id="wrapper">
		    <tiles:insertAttribute name="header" ignore="true" />
		    <tiles:insertAttribute name="menu" ignore="true" />   
		    <div id="main">
	    		<tiles:insertAttribute name="body"/> 
		    	<tiles:insertAttribute name="footer" ignore="true"/>
		    </div>
		</div>
	</body>
</html>
