// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.domain;

import com.springsource.petclinic.domain.Owner;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OwnerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OwnerDataOnDemand: @Component;
    
    private Random OwnerDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Owner> OwnerDataOnDemand.data;
    
    public Owner OwnerDataOnDemand.getNewTransientOwner(int index) {
        com.springsource.petclinic.domain.Owner obj = new com.springsource.petclinic.domain.Owner();
        java.lang.String address = "address_" + index;
        if (address.length() > 50) {
            address  = address.substring(0, 50);
        }
        obj.setAddress(address);
        obj.setBirthDay(new java.util.Date());
        java.lang.String city = "city_" + index;
        if (city.length() > 30) {
            city  = city.substring(0, 30);
        }
        obj.setCity(city);
        obj.setEmail("email_" + index);
        obj.setFirstName("firstName_" + index);
        obj.setHomePage("homePage_" + index);
        java.lang.String lastName = "lastName_" + index;
        if (lastName.length() > 30) {
            lastName  = lastName.substring(0, 30);
        }
        obj.setLastName(lastName);
        obj.setTelephone("telephone_" + index);
        return obj;
    }
    
    public Owner OwnerDataOnDemand.getSpecificOwner(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Owner obj = data.get(index);
        return Owner.findOwner(obj.getId());
    }
    
    public Owner OwnerDataOnDemand.getRandomOwner() {
        init();
        Owner obj = data.get(rnd.nextInt(data.size()));
        return Owner.findOwner(obj.getId());
    }
    
    public boolean OwnerDataOnDemand.modifyOwner(Owner obj) {
        return false;
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void OwnerDataOnDemand.init() {
        if (data != null && !data.isEmpty()) {
            return;
        }
        
        data = com.springsource.petclinic.domain.Owner.findOwnerEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Owner' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.springsource.petclinic.domain.Owner>();
        for (int i = 0; i < 10; i++) {
            com.springsource.petclinic.domain.Owner obj = getNewTransientOwner(i);
            obj.persist();
            data.add(obj);
        }
    }
    
}
